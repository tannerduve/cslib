@book{BaanenEtAl2025,
    author = {Anne Baanen and Alexander Bentkamp and Jasmin Blanchette and Xavier Généreux and Johannes Hölzl and Jannis Limperg},
    title = {The Hitchhiker's Guide to Logical Verification},
    edition = {2025 Desktop Edition},
    year = {2025},
    month = {April},
    note = {\url{https://lean-forward.github.io/hitchhikers-guide/2025}}
}

@article{         Barendregt1984,
  title={Introduction to Lambda Calculus},
  year={1984}
}

@article{Chargueraud2012,
	title = {The {Locally} {Nameless} {Representation}},
	volume = {49},
	issn = {1573-0670},
	url = {https://doi.org/10.1007/s10817-011-9225-2},
	doi = {10.1007/s10817-011-9225-2},
	abstract = {This paper provides an introduction to the locally nameless approach to the representation of syntax with variable binding, focusing in particular on the use of this technique in formal proofs. First, we explain the benefits of representing bound variables with de Bruijn indices while retaining names for free variables. Then, we explain how to describe and manipulate syntax in that form, and show how to define and reason about judgments on locally nameless terms.},
	language = {en},
	number = {3},
	urldate = {2025-07-13},
	journal = {Journal of Automated Reasoning},
	author = {Charguéraud, Arthur},
	month = oct,
	year = {2012},
	keywords = {Binders, C++, Cofinite quantification, Convention Theory, Data Structures, Formal proofs, Functions of a Complex Variable, Lisp, Locally nameless, Metatheory, Syntax},
	pages = {363--408},
	file = {Full Text PDF:/home/chenson/mount/Zotero/storage/WBJWAZGI/Charguéraud - 2012 - The Locally Nameless Representation.pdf:application/pdf},
}

@inbook{          Girard1995,
  place={Cambridge},
  series={London Mathematical Society Lecture Note Series},
  title={Linear Logic: its syntax and semantics},
  booktitle={Advances in Linear Logic},
  publisher={Cambridge University Press},
  author={Girard, J.-Y.},
  editor={Girard, Jean-Yves and Lafont, Yves and Regnier, LaurentEditors},
  year={1995},
  pages={1–42},
  collection={London Mathematical Society Lecture Note Series}
}

@inproceedings{Kiselyov2015,
  author    = {Kiselyov, Oleg and Ishii, Hiromi},
  title     = {Freer Monads, More Extensible Effects},
  booktitle = {Proceedings of the 2015 ACM SIGPLAN Symposium on Haskell},
  series    = {Haskell 2015},
  year      = {2015},
  pages     = {94--105},
  publisher = {ACM},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2804302.2804319},
  doi       = {10.1145/2804302.2804319},
  isbn      = {978-1-4503-3808-0}
}

@book{MilewskiDao,
  author    = {Milewski, Bartosz},
  title     = {The Dao of Functional Programming},
  publisher = {Self-published},
  year      = {2018},
  note      = {Available online at \url{https://bartoszmilewski.com}},
}

@book{            Milner80,
  author       = {Robin Milner},
  title        = {A Calculus of Communicating Systems},
  series       = {Lecture Notes in Computer Science},
  volume       = {92},
  publisher    = {Springer},
  year         = {1980},
  url          = {https://doi.org/10.1007/3-540-10235-3},
  doi          = {10.1007/3-540-10235-3},
  isbn         = {3-540-10235-3},
  timestamp    = {Tue, 14 May 2019 10:00:35 +0200},
  biburl       = {https://dblp.org/rec/books/sp/Milner80.bib},
  bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@Book{            Montesi2023,
  title         = {Introduction to {Choreographies}},
  author        = {Montesi, Fabrizio},
  year          = {2023},
  publisher     = {Cambridge University Press},
  address       = {Cambridge},
  url           = {https://www.cambridge.org/core/books/introduction-to-choreographies/65D3DA3CFF11AB835452CBC97FAE4830},
  urldate       = {2023-02-02},
  doi           = {10.1017/9781108981491},
  abstract      = {In concurrent and distributed systems, processes can
                  complete tasks together by playing their parts in a joint
                  plan. The plan, or protocol, can be written as a
                  choreography: a formal description of overall behaviour
                  that processes should collaborate to implement, like
                  authenticating a user or purchasing an item online.
                  Formality brings clarity, but not only that: choreographies
                  can contribute to important safety and liveness properties.
                  This book is an ideal introduction to theory of
                  choreographies for students, researchers, and professionals
                  in computer science and applied mathematics. It covers
                  languages for writing choreographies, their semantics, and
                  principles for implementing choreographies correctly. The
                  text treats the study of choreographies as a discipline in
                  its own right, following a systematic approach that starts
                  from simple foundations and proceeds to more advanced
                  features in incremental steps. Each chapter includes
                  examples and exercises aimed at helping with understanding
                  the theory and its relation to practice.},
  isbn          = {978-1-108-83376-9},
  keywords      = {choreographic-programming,choreographic-language,choreography,concurrency-theory}
}

book            {Pierce:SF1,
    author       =   {Benjamin C. Pierce and
                      Arthur Azevedo de Amorim and
                      Chris Casinghino and
                      Marco Gaboardi and
                      Michael Greenberg and
                      Cătălin Hriţcu and
                      Vilhelm Sjöberg and
                      Brent Yorgey},
    editor       =   {Benjamin C. Pierce},
    title        =   "Logical Foundations",
    series       =   "Software Foundations",
    volume       =   "1",
    year         =   "2025",
    publisher    =   "Electronic textbook",
    note         =   {Version 6.9.0, \URL{http://softwarefoundations.cis.upenn.edu}}
    }

@Book{            Sangiorgi2011,
  location      = {Cambridge},
  title         = {Introduction to Bisimulation and Coinduction},
  isbn          = {978-1-107-00363-7},
  url           = {https://www.cambridge.org/core/books/introduction-to-bisimulation-and-coinduction/8B54001CB763BAE9C4BA602C0A341D60},
  abstract      = {Induction is a pervasive tool in computer science and
                  mathematics for defining objects and reasoning on them.
                  Coinduction is the dual of induction and as such it brings
                  in quite different tools. Today, it is widely used in
                  computer science, but also in other fields, including
                  artificial intelligence, cognitive science, mathematics,
                  modal logics, philosophy and physics. The best known
                  instance of coinduction is bisimulation, mainly employed to
                  define and prove equalities among potentially infinite
                  objects: processes, streams, non-well-founded sets, etc.
                  This book presents bisimulation and coinduction: the
                  fundamental concepts and techniques and the duality with
                  induction. Each chapter contains exercises and selected
                  solutions, enabling students to connect theory with
                  practice. A special emphasis is placed on bisimulation as a
                  behavioural equivalence for processes. Thus the book serves
                  as an introduction to models for expressing processes (such
                  as process calculi) and to the associated techniques of
                  operational and algebraic analysis.},
  publisher     = {Cambridge University Press},
  author        = {Sangiorgi, Davide},
  urldate       = {2025-06-16},
  date          = {2011},
  doi           = {10.1017/CBO9780511777110}
}
